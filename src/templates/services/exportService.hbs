{{>header}}

{{#if imports}}
import type {
{{#each imports}}
{{{this}}},
{{/each}}
} from '../models';
{{/if}}
{{#if @root.exportClient}}
import type { BaseHttpRequest, ClientConfig } from '../core';
{{/if}}
import { {{{name}}}Full } from './{{{name}}}Full';

export class {{{name}}} {
    {{#if @root.exportClient}}
    private readonly httpRequest: BaseHttpRequest;
    private readonly clientConfig: ClientConfig;
    readonly full: {{{name}}}Full;

    constructor(httpRequest: BaseHttpRequest, clientConfig: ClientConfig) {
        this.httpRequest = httpRequest;
        this.clientConfig = clientConfig;
        this.full = new {{{name}}}Full(httpRequest, clientConfig);
    }
    {{/if}}

    {{#each operations}}
    /**
    {{#if deprecated}}
     * @deprecated
    {{/if}}
    {{#if summary}}
     * {{{summary}}}
    {{/if}}
    {{#if description}}
     * {{{description}}}
    {{/if}}
    {{#unless @root.useOptions}}
    {{#if parameters}}
    {{#each parameters}}
     * @param {{{name}}} {{{description}}}
    {{/each}}
    {{/if}}
    {{/unless}}
    {{#if @root.exportClient}}* @param [config] the optional OpenAPI config to use{{/if}}
    {{#each results}}
     * @returns {{{type}}} {{{description}}}
    {{/each}}
    * @throws ApiError
    */
    public{{#unless @root.exportClient}} static{{/unless}} async {{{name}}}({{>parameters}}): Promise<{{>result}}> {
    {{#if @root.exportClient}}
        return (await this.full.{{{name}}}({{>passParameters}})).body;
    {{else}}
        return (await {{{@root.name}}}Full.{{{name}}}({{>passParameters}})).body;
    {{/if}}
    }
    {{/each}}
}
