{{>header}}

{{#if imports}}
import type {
{{#each imports}}
 {{{this}}},
{{/each}}
} from '../models';
{{/if}}
{{#if @root.exportClient}}
import type { ApiResult, BaseHttpRequest, ClientConfig } from '../core';
{{else}}
import type { ApiResult } from '../core';
import {
    request as __request,
{{#if @root.useVersion}}
    OpenAPI,
{{/if}}
} from '../core';
{{/if}}

export class {{{name}}} {
    {{#if @root.exportClient}}
    private readonly httpRequest: BaseHttpRequest;
    private readonly ClientConfig: ClientConfig;

    constructor(httpRequest: BaseHttpRequest, ClientConfig: ClientConfig) {
        this.httpRequest = httpRequest;
        this.ClientConfig = ClientConfig;
    }
    {{/if}}

    {{#each operations}}
    /**
    {{#if deprecated}}
     * @deprecated
    {{/if}}
    {{#if summary}}
     * {{{summary}}}
    {{/if}}
    {{#if description}}
     * {{{description}}}
    {{/if}}
    {{#unless @root.useOptions}}
    {{#if parameters}}
    {{#each parameters}}
     * @param {{{name}}} {{{description}}}
    {{/each}}
    {{/if}}
    {{/unless}}
    {{#if @root.exportClient}}* @param [config] the optional OpenAPI config to use{{/if}}
    {{#each results}}
     * @returns {{{type}}} {{{description}}}
    {{/each}}
    * @throws ApiError
    */
    public{{#unless @root.exportClient}} static{{/unless}} async {{{name}}}({{>parameters}}): Promise<ApiResult<{{>result}}>> {
        return {{#if @root.exportClient}}this.httpRequest.request{{else}}__request{{/if}}({
            method: '{{{method}}}',
            path: `{{{path}}}`,
            {{#if parametersCookie}}
            cookies: {
                {{#each parametersCookie}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersHeader}}
            headers: {
                {{#each parametersHeader}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersQuery}}
            query: {
                {{#each parametersQuery}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersForm}}
            formData: {
                {{#each parametersForm}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersBody}}
            body: {{{parametersBody.name}}},
            {{#if parametersBody.mediaType}}
            mediaType: '{{{parametersBody.mediaType}}}',
            {{/if}}
            {{/if}}
            {{#if responseHeader}}
            responseHeader: '{{{responseHeader}}}',
            {{/if}}
            {{#if errors}}
            errors: {
                {{#each errors}}
                {{{code}}}: `{{{description}}}`,
                {{/each}}
            },
            {{/if}}
        }{{#if @root.exportClient}}, this.ClientConfig, config{{/if}});
    }

    {{/each}}
}
